name: Build and Release .NET DLL

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup .NET SDK
      - name: Setup .NET 8.0.x SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Build the project
      - name: Build project
        run: dotnet build --configuration Release --no-restore

      # Package the build output
      - name: Package DLL
        run: |
          dotnet publish --configuration Release --output ./output
          mkdir -p ./artifacts
          cp ./output/*.dll ./artifacts/

      # Upload artifact (optional for debugging purposes)
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: compiled-dll
          path: ./artifacts

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Checkout the code (again, for release context)
      - name: Checkout code
        uses: actions/checkout@v3

      # Create a GitHub release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # Upload DLLs to the release
      - name: Upload DLLs to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts
          asset_name: CS2AutoUpdater.zip
          asset_content_type: application/zip

      # Zip the artifacts
      - name: Zip Artifacts
        run: zip -j CS2AutoUpdater.zip ./artifacts/*
